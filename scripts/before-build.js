const includeDev = true;
const fs = require('fs'),path=require('path'),zlib=require('zlib');
const package_name = require (path.join (__dirname,'..','package.json')).name;
const src = path.join (__dirname,'..','browser');
const dest =  path.join (__dirname,'..','browser-pkg');
const UglifyJS = require("uglify-js");
const htmlMinify = require('html-minifier');
const CleanCSS = require('clean-css');


const UglifyOptions = {
     output : { comments : '/(copyright|do not remove)/i' }

};

const HTMLMinifyoptions = {
    includeAutoGeneratedTags: true,
    removeAttributeQuotes: true,
    removeComments: false,
    removeRedundantAttributes: true,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    sortClassName: true,
    useShortDoctype: true,
    collapseWhitespace: true
  };

const CSSMinifyOptions = {

};

const CSSMinifier = new CleanCSS(CSSMinifyOptions)


const js_regexp = /\.js$/;
const html_regexp = /\.html$/;
const css_regexp = /\.css$/;

// index of minifiers by file ext
const minifiers = {
    js : function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const result = UglifyJS.minify(content, UglifyOptions);
        if (!result.error && result.code) {
            const extFix =  function(f){return f.replace(js_regexp,'.min.js');};
            return {
                content,
                contentMin : result.code,
                extFix,
                htmlFix : function (html) {
                    const replace     = `src="${basename}"`;
                    if (html.indexOf(replace)>=0) {
                        const replaceWith = `src="${extFix(basename)}"`;
                        while (html.indexOf(replace)>=0) {
                            html = html.replace(replace,replaceWith);
                        }
                    }
                    return html;
                }
            }
        }
        return {
            content:contentBuf
        };
    },
    html : function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const extFix =  function(f){return f.replace(html_regexp,'.min.html');};
        const contentMin =  htmlMinify.minify(content, HTMLMinifyoptions);  
        if (contentMin.trim() === content) {
            return {
                content:contentBuf
            };
        }
        return {
            content,contentMin,extFix
        };
    },
    css :  function (basename,contentBuf) {
        const content = contentBuf.toString('utf8').trim();
        const result =  CSSMinifier.minify(content);
        const contentMin = result && result.styles;
        if (!contentMin ||  contentMin.trim() === content) {
            return {
                content:contentBuf
            };
        }
        const extFix =  function(f){return f.replace(css_regexp,'.min.css');};
        return {
            content,
            contentMin,
            extFix,
            htmlFix : function (html) {
                const replace     = `href="${basename}"`;
                if (html.indexOf(replace)>=0) {
                    const replaceWith = `href="${extFix(basename)}"`;
                    while (html.indexOf(replace)>=0) {
                        html = html.replace(replace,replaceWith);
                    }
                }
                return html;
            }
        };
    },
}


function minify(pathToContent,contentBuf) {
    const parts =  pathToContent.split('.');
    const ext =  parts.pop();
    const isMin = parts.pop() === 'min';
    if (isMin) return null;
    const mini = minifiers [ ext ];
    if (!mini) return null;
    return mini(path.basename(pathToContent),contentBuf);
}

function copyBrowserFilesAsExtra(subdir,filenames,output_path) {
    const basepath  = path.resolve(__dirname,'..',subdir);

    
    filenames =  filenames || fs.readdirSync(basepath).filter(function(fn){
        return !fn.startsWith(".") && !fn.endsWith(".txt"); 
    });
    const filepaths = filenames.map(function(fn){ return path.join(basepath,fn)});
    const fixups = [];
    filepaths.forEach(function(pth,ix){ 
        if (html_regexp.test(pth)) return;
        const file_data = fs.readFileSync(pth);
        const file_path = path.join(output_path,subdir+'-' + filenames[ix]);
        const minified = minify(filenames[ix],file_data);
        if (minified) {
            if (minified.contentMin) {
                const file_path_min = minified.extFix( file_path );
                fs.writeFileSync(file_path_min,minified.contentMin);
                if ( minified.htmlFix ) {
                    fixups.push(minified );
                }
            }
            if (!minified.contentMin || includeDev) {
                fs.writeFileSync(file_path,file_data);
            }
        } else {
            fs.writeFileSync(file_path,file_data);
        }  
    });

    filepaths.forEach(function(pth,ix){

        if (!html_regexp.test(pth)) return;

        const clean_file_data = fs.readFileSync(pth,'utf8');
        let file_data = clean_file_data;
        fixups.forEach(function(f){
            file_data = f.htmlFix(file_data);
        });

        const minified = minify(filenames[ix],Buffer.from(file_data));
       
        if (includeDev || !minified) {
            const file_path = path.join(output_path,subdir+'-' + filenames[ix]).replace(html_regexp,'-dev.html');
            fs.writeFileSync(file_path,clean_file_data);
        }

        if (minified) {
            const file_path = path.join(output_path,subdir+'-' + filenames[ix]);
            fs.writeFileSync(file_path,minified.contentMin);
        }
       
    });
}

 
function incrementBuildNo() {
    const package_path = path.join(__dirname,'..','package.json');
    const package = JSON.parse(fs.readFileSync(package_path,'utf8'));
    const vers = package.version.split(".");
    const buildNo = (Number.parseInt(vers.pop())||0)+1;
    vers.push(buildNo.toString());
    package.version = vers.join('.');
    console.log({build:{name:package.name,version:package.version,buildNo}});
    fs.writeFileSync(package_path,JSON.stringify(package,undefined,4));

    const manifest_path = path.join(__dirname,'..','companion','manifest.json');
    const manifest = JSON.parse(fs.readFileSync(manifest_path,'utf8'));

    manifest.version = package.version;
    fs.writeFileSync(manifest_path,JSON.stringify(manifest));
}
if (fs.existsSync(src) && fs.statSync(src).isDirectory()) {

    if (fs.existsSync(dest)) {
        if (fs.statSync(dest).isDirectory()) {
            fs.rmSync(dest,{ recursive: true, force: true });
        } else {
            fs.unlinkSync(dest,{  force: true });
        }
    } 

    fs.mkdirSync(dest,{recursive:true});
    copyBrowserFilesAsExtra('browser',undefined,dest);

}

incrementBuildNo();
