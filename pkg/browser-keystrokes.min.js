(function(r,d){typeof exports=="object"&&typeof module<"u"?d(exports):typeof define=="function"&&define.amd?define(["exports"],d):(r=typeof globalThis<"u"?globalThis:r||self,d(r.keystrokes={}))})(this,function(r){"use strict";var Z=Object.defineProperty;var $=(r,d,y)=>d in r?Z(r,d,{enumerable:!0,configurable:!0,writable:!0,value:y}):r[d]=y;var o=(r,d,y)=>($(r,typeof d!="symbol"?d+"":d,y),y);class d{constructor(e){o(this,"_onPressed");o(this,"_onPressedWithRepeat");o(this,"_onReleased");o(this,"_isPressed");o(this,"_identity");this._isPressed=!1,this._identity=e,typeof e=="function"?this._onPressedWithRepeat=e:(this._onPressed=e.onPressed,this._onPressedWithRepeat=e.onPressedWithRepeat,this._onReleased=e.onReleased)}get isEmpty(){return!this._onPressed&&!this._onPressedWithRepeat&&!this._onReleased}isOwnHandler(e){return this._identity===e}executePressed(e){var t,n;this._isPressed||(t=this._onPressed)==null||t.call(this,e),this._isPressed=!0,(n=this._onPressedWithRepeat)==null||n.call(this,e)}executeReleased(e){var t;this._isPressed&&((t=this._onReleased)==null||t.call(this,e)),this._isPressed=!1}}const l=class l{constructor(e,t,n={}){o(this,"_normalizedKeyCombo");o(this,"_parsedKeyCombo");o(this,"_handlerState");o(this,"_keyComboEventMapper");o(this,"_movingToNextSequenceAt");o(this,"_sequenceIndex");o(this,"_unitIndex");o(this,"_lastActiveKeyPresses");o(this,"_lastActiveKeyCount");o(this,"_isPressedWithFinalUnit");this._normalizedKeyCombo=l.normalizeKeyCombo(e),this._parsedKeyCombo=l.parseKeyCombo(e),this._handlerState=new d(n),this._keyComboEventMapper=t,this._movingToNextSequenceAt=0,this._sequenceIndex=0,this._unitIndex=0,this._lastActiveKeyPresses=[],this._lastActiveKeyCount=0,this._isPressedWithFinalUnit=null}static parseKeyCombo(e){if(l._parseCache[e])return l._parseCache[e];const t=e.toLowerCase();let n="",s=[],a=[s],c=[a];const C=[c];let K=!1;for(let h=0;h<e.length;h+=1)if(t[h]==="\\")K=!0;else if((t[h]==="+"||t[h]===">"||t[h]===",")&&!K){if(n)throw new Error("cannot have two operators in a row");n=t[h]}else t[h].match(/[^\s]/)&&(n&&(n===","?(s=[],a=[s],c=[a],C.push(c)):n===">"?(s=[],a=[s],c.push(a)):n==="+"&&(s=[],a.push(s)),n=""),K=!1,s.push(t[h]));const u=C.map(h=>h.map(b=>b.map(f=>f.join(""))));return l._parseCache[e]=u,u}static stringifyKeyCombo(e){return e.map(t=>t.map(n=>n.map(s=>s==="+"?"\\+":s===">"?"\\>":s===","?"\\,":s).join("+")).join(">")).join(",")}static normalizeKeyCombo(e){if(l._normalizationCache[e])return l._normalizationCache[e];const t=this.stringifyKeyCombo(this.parseKeyCombo(e));return l._normalizationCache[e]=t,t}get isPressed(){return!!this._isPressedWithFinalUnit}get sequenceIndex(){return this.isPressed?this._parsedKeyCombo.length:this._sequenceIndex}isOwnHandler(e){return this._handlerState.isOwnHandler(e)}executePressed(e){var t;(t=this._isPressedWithFinalUnit)!=null&&t.has(e.key)&&this._handlerState.executePressed(this._wrapEvent(this._lastActiveKeyPresses,{key:e.key,event:e}))}executeReleased(e){var t;(t=this._isPressedWithFinalUnit)!=null&&t.has(e.key)&&(this._handlerState.executeReleased(this._wrapEvent(this._lastActiveKeyPresses,{key:e.key,event:e})),this._isPressedWithFinalUnit=null)}updateState(e,t){const n=e.length,s=n<this._lastActiveKeyCount;this._lastActiveKeyCount=n;const a=this._parsedKeyCombo[this._sequenceIndex],c=a.slice(0,this._unitIndex),C=a.slice(this._unitIndex),K=()=>{this._movingToNextSequenceAt=0,this._sequenceIndex=0,this._unitIndex=0,this._lastActiveKeyPresses.length=0,this._handlerState.isEmpty&&(this._isPressedWithFinalUnit=null)};let u=0;if(s){if(this._movingToNextSequenceAt===0)return K();if(this._movingToNextSequenceAt+t<Date.now()||n!==0)return;this._movingToNextSequenceAt=0,this._sequenceIndex+=1,this._unitIndex=0;return}for(const h of c){for(const b of h){let f=!1;for(let _=u;_<e.length&&_<u+h.length;_+=1)if(e[_].key===b){f=!0;break}if(!f)return K()}u+=h.length}if(this._movingToNextSequenceAt===0){for(const h of C){for(const b of h){let f=!1;for(let _=u;_<e.length&&_<u+h.length;_+=1)if(e[_].key===b){f=!0;break}if(!f)return}this._unitIndex+=1,u+=h.length}if(u<n-1)return K();if(this._lastActiveKeyPresses[this._sequenceIndex]=e.slice(0),this._sequenceIndex<this._parsedKeyCombo.length-1){this._movingToNextSequenceAt=Date.now();return}this._isPressedWithFinalUnit=new Set(a[a.length-1])}}_wrapEvent(e,t){return{...this._keyComboEventMapper(e,t),keyCombo:this._normalizedKeyCombo,keyEvents:e.flat().map(s=>s.event),finalKeyEvent:t.event}}};o(l,"_parseCache",{}),o(l,"_normalizationCache",{});let y=l;const E={addEventListener:(...i)=>{},removeEventListener:(...i)=>{},dispatchEvent:(...i)=>{}},R={userAgent:""},p=()=>typeof document<"u"?document:E,x=()=>typeof navigator<"u"?navigator:R,q=()=>x().userAgent.toLocaleLowerCase().includes("mac");let k=!1;const I=i=>{!q()||i.key!=="Meta"||(k=!0)},M=i=>{!k||i.key!=="Meta"||(k=!1,S())},v=new Map,B=i=>{v.set(i.key,i)},L=i=>{v.delete(i.key)},S=()=>{for(const i of v.values()){const e=new KeyboardEvent("keyup",{key:i.key,code:i.code,bubbles:!0,cancelable:!0});p().dispatchEvent(e)}v.clear()},O=i=>{try{const e=()=>i();return addEventListener("focus",e),()=>{removeEventListener("focus",e)}}catch{}},T=i=>{try{const e=()=>{S(),i()};return addEventListener("blur",e),()=>removeEventListener("blur",e)}catch{}},W=i=>{try{const e=t=>(B(t),I(t),i({key:t.key,originalEvent:t,composedPath:()=>t.composedPath(),preventDefault:()=>t.preventDefault()}));return p().addEventListener("keydown",e),()=>p().removeEventListener("keydown",e)}catch{}},z=i=>{try{const e=t=>(L(t),M(t),i({key:t.key,originalEvent:t,composedPath:()=>t.composedPath(),preventDefault:()=>t.preventDefault()}));return p().addEventListener("keyup",e),()=>p().removeEventListener("keyup",e)}catch{}},U=1e3;class g{constructor(e={}){o(this,"sequenceTimeout");o(this,"_isActive");o(this,"_unbinder");o(this,"_onActiveBinder");o(this,"_onInactiveBinder");o(this,"_onKeyPressedBinder");o(this,"_onKeyReleasedBinder");o(this,"_keyComboEventMapper");o(this,"_selfReleasingKeys");o(this,"_keyRemap");o(this,"_handlerStates");o(this,"_keyComboStates");o(this,"_keyComboStatesArray");o(this,"_activeKeyPresses");o(this,"_activeKeyMap");o(this,"_watchedKeyComboStates");this.sequenceTimeout=U,this._isActive=!0,this._onActiveBinder=()=>{},this._onInactiveBinder=()=>{},this._onKeyPressedBinder=()=>{},this._onKeyReleasedBinder=()=>{},this._keyComboEventMapper=()=>({}),this._selfReleasingKeys=[],this._keyRemap={},this._handlerStates={},this._keyComboStates={},this._keyComboStatesArray=[],this._activeKeyPresses=[],this._activeKeyMap=new Map,this._watchedKeyComboStates={},this.bindEnvironment(e)}get pressedKeys(){return this._activeKeyPresses.map(e=>e.key)}bindKey(e,t){var s;e=e.toLowerCase();const n=new d(t);(s=this._handlerStates)[e]??(s[e]=[]),this._handlerStates[e].push(n)}unbindKey(e,t){e=e.toLowerCase();const n=this._handlerStates[e];if(n)if(t)for(let s=0;s<n.length;s+=1)n[s].isOwnHandler(t)&&(n.splice(s,1),s-=1);else n.length=0}bindKeyCombo(e,t){var s;e=y.normalizeKeyCombo(e);const n=new y(e,this._keyComboEventMapper,t);(s=this._keyComboStates)[e]??(s[e]=[]),this._keyComboStates[e].push(n),this._keyComboStatesArray.push(n)}unbindKeyCombo(e,t){e=y.normalizeKeyCombo(e);const n=this._keyComboStates[e];if(n)if(t){for(let s=0;s<n.length;s+=1)if(n[s].isOwnHandler(t)){for(let a=0;a<this._keyComboStatesArray.length;a+=1)this._keyComboStatesArray[a]===n[s]&&(this._keyComboStatesArray.splice(a,1),a-=1);n.splice(s,1),s-=1}}else n.length=0}checkKey(e){return this._activeKeyMap.has(e.toLowerCase())}checkKeyCombo(e){return this._ensureCachedKeyComboState(e).isPressed}checkKeyComboSequenceIndex(e){return this._ensureCachedKeyComboState(e).sequenceIndex}bindEnvironment(e={}){this.unbindEnvironment(),this._onActiveBinder=e.onActive??O,this._onInactiveBinder=e.onInactive??T,this._onKeyPressedBinder=e.onKeyPressed??W,this._onKeyReleasedBinder=e.onKeyReleased??z,this._keyComboEventMapper=e.mapKeyComboEvent??(()=>({})),this._selfReleasingKeys=e.selfReleasingKeys??[],this._keyRemap=e.keyRemap??{};const t=this._onActiveBinder(()=>{this._isActive=!0}),n=this._onInactiveBinder(()=>{this._isActive=!1}),s=this._onKeyPressedBinder(c=>{this._handleKeyPress(c)}),a=this._onKeyReleasedBinder(c=>{this._handleKeyRelease(c)});this._unbinder=()=>{t==null||t(),n==null||n(),s==null||s(),a==null||a()}}unbindEnvironment(){var e;(e=this._unbinder)==null||e.call(this)}_ensureCachedKeyComboState(e){e=y.normalizeKeyCombo(e),this._watchedKeyComboStates[e]||(this._watchedKeyComboStates[e]=new y(e,this._keyComboEventMapper));const t=this._watchedKeyComboStates[e];return t.updateState(this._activeKeyPresses,this.sequenceTimeout),t}_handleKeyPress(e){if(!this._isActive)return;e={...e,key:e.key.toLowerCase()};const t=this._keyRemap[e.key];t&&(e.key=t);const n=this._handlerStates[e.key];if(n)for(const a of n)a.executePressed(e);const s=this._activeKeyMap.get(e.key);if(s)s.event=e;else{const a={key:e.key,event:e};this._activeKeyMap.set(e.key,a),this._activeKeyPresses.push(a)}this._updateKeyComboStates();for(const a of this._keyComboStatesArray)a.executePressed(e)}_handleKeyRelease(e){e={...e,key:e.key.toLowerCase()};const t=this._keyRemap[e.key];t&&(e.key=t);const n=this._handlerStates[e.key];if(n)for(const s of n)s.executeReleased(e);if(this._activeKeyMap.has(e.key)){this._activeKeyMap.delete(e.key);for(let s=0;s<this._activeKeyPresses.length;s+=1)if(this._activeKeyPresses[s].key===e.key){this._activeKeyPresses.splice(s,1),s-=1;break}}this._tryReleaseSelfReleasingKeys(),this._updateKeyComboStates();for(const s of this._keyComboStatesArray)s.executeReleased(e)}_updateKeyComboStates(){for(const e of this._keyComboStatesArray)e.updateState(this._activeKeyPresses,this.sequenceTimeout)}_tryReleaseSelfReleasingKeys(){for(const e of this._activeKeyPresses)for(const t of this._selfReleasingKeys)e.key===t&&this._handleKeyRelease(e.event)}}let A,P;const w=i=>{P=i??new g(A)},m=()=>(P||w(),P),F=i=>{A=i},H=(...i)=>m().bindKey(...i),N=(...i)=>m().unbindKey(...i),j=(...i)=>m().bindKeyCombo(...i),D=(...i)=>m().unbindKeyCombo(...i),G=(...i)=>m().checkKey(...i),J=(...i)=>m().checkKeyCombo(...i),Q=y.normalizeKeyCombo,V=y.stringifyKeyCombo,X=y.parseKeyCombo,Y=(i={})=>{let e,t,n,s;return Object.assign(new g({...i,onActive(c){e=c},onInactive(c){t=c},onKeyPressed(c){n=c},onKeyReleased(c){s=c}}),{activate(){e()},deactivate(){t()},press(c){n({composedPath:()=>[],...c})},release(c){s({composedPath:()=>[],...c})}})};r.bindKey=H,r.bindKeyCombo=j,r.checkKey=G,r.checkKeyCombo=J,r.createTestKeystrokes=Y,r.getGlobalKeystrokes=m,r.normalizeKeyCombo=Q,r.parseKeyCombo=X,r.setGlobalKeystrokes=w,r.setGlobalKeystrokesOptions=F,r.stringifyKeyCombo=V,r.unbindKey=N,r.unbindKeyCombo=D,Object.defineProperty(r,Symbol.toStringTag,{value:"Module"})});
